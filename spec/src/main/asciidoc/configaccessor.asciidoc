//
// Copyright (c) 2016-2018 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Mark Struberg

[[configaccessor]]
== ConfigAccessor


The `ConfigAccessor` API is intended for typed configuration values and precise control over resolution.

=== ConfigAccessor Usage

The simplest usage of the API is resolution of a String property, equivalent to a call to `Config.getValue(propertyKey, String.class)`.
This can also be handled via `ConfigAccessor` as shown in the following example:

.Simple example of ConfigAccessor
[source,java]
-----------------------------------------------------------------
Config config = ConfigProvider.getConfig();
ConfigAccessor<Integer> ftpPortCfg = config.access("myapp.someftp.port")
                                           .as(Integer.class);
...
Integer port = ftpPortCfg.getValue();
-----------------------------------------------------------------


The call to `config.access(..)` returns a builder which has methods to refine the resolution, including the
following:

* `as(Class<N> clazz)` -- defines the return type of the property
* `asList()` --
* `parameterizedBy(String propertyName)` -- sets a parameter for the resolution, similarly as in
<<_getpropertyawarepropertyvalue, ConfigResolver.getPropertyAwarePropertyValue>>
for the resolution
* `strictly(boolean strictly)` -- indicates, whether the <<_property_value_resolution_sequence, property value
resolution sequence>> should be taken into account. When set to true, the sequence is not followed.
* `withDefault(T value)` -- sets the default value, used in case the resolution returns `null`
* `getValue()` -- terminates the builder and returns the resolved value with the appropriate type

.A more complete example of ConfigAccessor
[source,java]
-----------------------------------------------------------------
Integer dbPort = config
    .access("db.port")
    .as(Integer.class)
    .withProjectStage(true)
    .parameterizedBy("db.vendor")
    .withDefault(3306)
    .getValue();
-----------------------------------------------------------------
